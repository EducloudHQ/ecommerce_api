AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'ecommerce-api

  Powertools for AWS Lambda (Python) example

  '
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: python3.10
    Tracing: Active
    Environment:
      Variables:
        TABLE_NAME:
          Ref: EcommerceAppTable
        UPDATE_CART_PRODUCT_SQS:
          Ref: UpdateCartProductsSQS
        POWERTOOLS_SERVICE_NAME: ecommerce-api
        POWERTOOLS_METRICS_NAMESPACE: ecommerce-api-metric
        LOG_LEVEL: DEBUG
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            Resource:
              Fn::GetAtt:
              - EcommerceAppTable
              - StreamArn
  EventSourceDDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      FilterCriteria:
        Filters:
        - Pattern: '{ "dynamodb": { "NewImage": { "order_status": { "S": ["ORDERED"]
            } } } }'
      EventSourceArn:
        Fn::GetAtt:
        - EcommerceAppTable
        - StreamArn
      FunctionName:
        Fn::GetAtt:
        - ProcessCartProductsFunction
        - Arn
      StartingPosition: LATEST
  RESTAPIAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ecommerce-api-Access-Logs
      RetentionInDays: 1
  RESTAPIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: AllowSqsIntegration
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource:
              Fn::GetAtt:
              - RESTAPIAccessLogs
              - Arn
  EcommerceRESTAPI:
    Type: AWS::Serverless::Api
    Properties:
      Description: ecommerce api with api-key authentication
      Name: EcommerceRESTAPI
      StageName: Dev
      Auth:
        ApiKeyRequired: true
  UpdateCartProductsSQS:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 20
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - UpdateCartProductsDLQ
          - Arn
        maxReceiveCount: 5
  UpdateCartProductsDLQ:
    Type: AWS::SQS::Queue
  UpdateCartProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_cart_products.lambda_handler
      CodeUri: UpdateCartProductsFunction
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Description: Lambda function pulls the sqs queue messages and processes the
        order items
      Architectures:
      - x86_64
      Events:
        RetrieveFromSQS:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - UpdateCartProductsSQS
              - Arn
            BatchSize: 5
            FunctionResponseTypes:
            - ReportBatchItemFailures
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.UpdateCartProductsFunction2d6aef2dDepLayer
    Connectors:
      SQSConnectors:
        Properties:
          Destination:
            Id: UpdateCartProductsSQS
          Permissions:
          - Read
    Metadata:
      SamResourceId: UpdateCartProductsFunction
  ProcessCartProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process_cart_products.lambda_handler
      CodeUri: ProcessCartProductsFunction
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Description: Lambda function listens to dynamodb streams, gets order and sends
        order to sqs
      Architectures:
      - x86_64
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ProcessCartProductsFunction5c56808eDepLayer
    Connectors:
      SQSConnectors:
        Properties:
          Destination:
            Id: UpdateCartProductsSQS
          Permissions:
          - Write
      updateDDBItemConnection:
        Properties:
          Destination:
            Id: EcommerceAppTable
          Permissions:
          - Write
    Metadata:
      SamResourceId: ProcessCartProductsFunction
  ProductLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: product.lambda_handler
      CodeUri: ProductLambdaFunction
      Description: Lambda function for all product endpoints
      Architectures:
      - x86_64
      Events:
        LoadProductPath:
          Type: Api
          Properties:
            Path: /loadProducts
            Method: POST
            RestApiId:
              Ref: EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
        GetProductPath:
          Type: Api
          Properties:
            Path: /products/{product_id}
            Method: GET
            RestApiId:
              Ref: EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
        GetProductsPath:
          Type: Api
          Properties:
            Path: /products
            Method: GET
            RestApiId:
              Ref: EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.ProductLambdaFunction5ee6b3f5DepLayer
    Connectors:
      productConnectors:
        Properties:
          Destination:
            Id: EcommerceAppTable
          Permissions:
          - Write
          - Read
    Metadata:
      SamResourceId: ProductLambdaFunction
  OrderLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function with cart and order endpoints
      CodeUri: OrderLambdaFunction
      Handler: order.lambda_handler
      Events:
        addToCartPath:
          Type: Api
          Properties:
            Path: /cart/{user_id}/checkout
            Method: POST
            RestApiId:
              Ref: EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
        getCartItemsPath:
          Type: Api
          Properties:
            Path: /cart/{user_id}
            Method: GET
            RestApiId:
              Ref: EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
        orderPath:
          Type: Api
          Properties:
            Path: /order
            Method: POST
            RestApiId:
              Ref: EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
      Layers:
      - Fn::GetAtt:
        - AwsSamAutoDependencyLayerNestedStack
        - Outputs.OrderLambdaFunctionf3756e44DepLayer
    Connectors:
      addToCartConnection:
        Properties:
          Destination:
            Id: EcommerceAppTable
          Permissions:
          - Write
          - Read
    Metadata:
      SamResourceId: OrderLambdaFunction
  EcommerceAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: GSI1PK
        AttributeType: S
      - AttributeName: GSI1SK
        AttributeType: S
      - AttributeName: GSI2PK
        AttributeType: S
      - AttributeName: GSI2SK
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: userOrders
        KeySchema:
        - AttributeName: GSI1PK
          KeyType: HASH
        - AttributeName: GSI1SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: orderProducts
        KeySchema:
        - AttributeName: GSI2PK
          KeyType: HASH
        - AttributeName: GSI2SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  AwsSamAutoDependencyLayerNestedStack:
    DeletionPolicy: Delete
    Metadata:
      CreatedBy: AWS SAM CLI sync command
    Properties:
      TemplateURL: /Users/rosius/Documents/ecommerce-api/.aws-sam/auto-dependency-layer/adl_nested_template.yaml
    Type: AWS::CloudFormation::Stack
Outputs:
  EcommerceRestApi:
    Description: API Gateway endpoint URL for Dev environment for ecommerce rest api
    Value:
      Fn::Sub: https://${EcommerceRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/Dev
  ProductLambdaFunction:
    Description: Product Lambda Function ARN
    Value:
      Fn::GetAtt:
      - ProductLambdaFunction
      - Arn
